// Generated by gencpp from file arm_relay/EnableActuatorsResponse.msg
// DO NOT EDIT!


#ifndef ARM_RELAY_MESSAGE_ENABLEACTUATORSRESPONSE_H
#define ARM_RELAY_MESSAGE_ENABLEACTUATORSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_relay
{
template <class ContainerAllocator>
struct EnableActuatorsResponse_
{
  typedef EnableActuatorsResponse_<ContainerAllocator> Type;

  EnableActuatorsResponse_()
    : enabled(false)  {
    }
  EnableActuatorsResponse_(const ContainerAllocator& _alloc)
    : enabled(false)  {
  (void)_alloc;
    }



   typedef uint8_t _enabled_type;
  _enabled_type enabled;





  typedef boost::shared_ptr< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct EnableActuatorsResponse_

typedef ::arm_relay::EnableActuatorsResponse_<std::allocator<void> > EnableActuatorsResponse;

typedef boost::shared_ptr< ::arm_relay::EnableActuatorsResponse > EnableActuatorsResponsePtr;
typedef boost::shared_ptr< ::arm_relay::EnableActuatorsResponse const> EnableActuatorsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace arm_relay

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['C:/Program Files/MATLAB/R2021b/sys/ros1/win64/ros1/share/std_msgs/cmake/../msg'], 'arm_relay': ['C:/Users/trbin/Documents/GitHub/ASTRA_Arm_Inverse_Kinematics_Pre-Calculator/ArmIK/packages/matlab_msg_gen_ros1/win64/src/arm_relay/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2815464f55ab63684cc1bc38072d0b9b";
  }

  static const char* value(const ::arm_relay::EnableActuatorsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2815464f55ab6368ULL;
  static const uint64_t static_value2 = 0x4cc1bc38072d0b9bULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_relay/EnableActuatorsResponse";
  }

  static const char* value(const ::arm_relay::EnableActuatorsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"bool enabled\n"
;
  }

  static const char* value(const ::arm_relay::EnableActuatorsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enabled);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EnableActuatorsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_relay::EnableActuatorsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_relay::EnableActuatorsResponse_<ContainerAllocator>& v)
  {
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_RELAY_MESSAGE_ENABLEACTUATORSRESPONSE_H
